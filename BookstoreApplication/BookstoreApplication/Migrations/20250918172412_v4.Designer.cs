// <auto-generated />
using System;
using BookstoreApplication.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookstoreApplication.Migrations
{
    [DbContext(typeof(BookstoreDbContext))]
    [Migration("20250918172412_v4")]
    partial class v4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookstoreApplication.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Birthday");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "Pisac romana i eseja.",
                            DateOfBirth = new DateTime(1975, 5, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "John Smith"
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Autorka dečjih knjiga.",
                            DateOfBirth = new DateTime(1982, 8, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Emily Johnson"
                        },
                        new
                        {
                            Id = 3,
                            Biography = "Specijalista za istorijske trilere.",
                            DateOfBirth = new DateTime(1968, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Michael Brown"
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Piše savremene ljubavne romane.",
                            DateOfBirth = new DateTime(1990, 10, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Sophia Davis"
                        },
                        new
                        {
                            Id = 5,
                            Biography = "Poznat po naučno-fantastičnim delima.",
                            DateOfBirth = new DateTime(1978, 3, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "David Wilson"
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.AuthorAwardRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("AwardId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AwardedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("AwardId");

                    b.ToTable("AuthorAwardBridge", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            AwardId = 1,
                            AwardedOn = new DateTime(2011, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            AwardId = 3,
                            AwardedOn = new DateTime(2015, 7, 12, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            AwardId = 2,
                            AwardedOn = new DateTime(2016, 2, 20, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            AwardId = 1,
                            AwardedOn = new DateTime(2018, 3, 5, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            AwardId = 3,
                            AwardedOn = new DateTime(2013, 10, 8, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 3,
                            AwardId = 1,
                            AwardedOn = new DateTime(2017, 11, 30, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 3,
                            AwardId = 4,
                            AwardedOn = new DateTime(2019, 6, 14, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 4,
                            AwardId = 1,
                            AwardedOn = new DateTime(2020, 4, 25, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 4,
                            AwardId = 2,
                            AwardedOn = new DateTime(2021, 8, 18, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 4,
                            AwardId = 3,
                            AwardedOn = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 5,
                            AwardId = 4,
                            AwardedOn = new DateTime(2015, 5, 5, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 5,
                            AwardId = 1,
                            AwardedOn = new DateTime(2017, 7, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 5,
                            AwardId = 3,
                            AwardedOn = new DateTime(2018, 9, 9, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 5,
                            AwardId = 2,
                            AwardedOn = new DateTime(2020, 11, 2, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 1,
                            AwardId = 4,
                            AwardedOn = new DateTime(2023, 6, 11, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AwardStartYear")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Award");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AwardStartYear = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Najbolja knjiga godine",
                            Name = "National Book Prize"
                        },
                        new
                        {
                            Id = 2,
                            AwardStartYear = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Najbolje dečje štivo",
                            Name = "Children’s Literature Award"
                        },
                        new
                        {
                            Id = 3,
                            AwardStartYear = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Najbolji istorijski roman",
                            Name = "Historical Fiction Medal"
                        },
                        new
                        {
                            Id = 4,
                            AwardStartYear = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Najbolja SF knjiga",
                            Name = "Sci-Fi Galaxy Award"
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            ISBN = "978000000001",
                            PageCount = 320,
                            PublishedDate = new DateTime(2010, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Rivers of Time"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            ISBN = "978000000002",
                            PageCount = 280,
                            PublishedDate = new DateTime(2011, 9, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "The Hidden Valley"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            ISBN = "978000000003",
                            PageCount = 150,
                            PublishedDate = new DateTime(2015, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Magic Adventures"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            ISBN = "978000000004",
                            PageCount = 180,
                            PublishedDate = new DateTime(2018, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 3,
                            Title = "Forest Tales"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            ISBN = "978000000005",
                            PageCount = 410,
                            PublishedDate = new DateTime(2012, 6, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "Empire Shadows"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 3,
                            ISBN = "978000000006",
                            PageCount = 390,
                            PublishedDate = new DateTime(2014, 11, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 3,
                            Title = "Lost Crown"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 4,
                            ISBN = "978000000007",
                            PageCount = 250,
                            PublishedDate = new DateTime(2019, 2, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Hearts and Stars"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 4,
                            ISBN = "978000000008",
                            PageCount = 230,
                            PublishedDate = new DateTime(2020, 7, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "Summer Letters"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 5,
                            ISBN = "978000000009",
                            PageCount = 500,
                            PublishedDate = new DateTime(2016, 4, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 3,
                            Title = "Cosmic Voyage"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 5,
                            ISBN = "978000000010",
                            PageCount = 450,
                            PublishedDate = new DateTime(2018, 9, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 1,
                            Title = "Beyond the Stars"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 5,
                            ISBN = "978000000011",
                            PageCount = 470,
                            PublishedDate = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 2,
                            Title = "Parallel Worlds"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 1,
                            ISBN = "978000000012",
                            PageCount = 430,
                            PublishedDate = new DateTime(2022, 12, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            PublisherId = 3,
                            Title = "Time Horizons"
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adress = "Main Street 12",
                            Name = "Sunrise Books",
                            Website = "https://sunrisebooks.com"
                        },
                        new
                        {
                            Id = 2,
                            Adress = "Harbor Ave 45",
                            Name = "Blue Ocean Press",
                            Website = "https://blueoceanpress.com"
                        },
                        new
                        {
                            Id = 3,
                            Adress = "Cosmos Blvd 99",
                            Name = "Galaxy Publishing",
                            Website = "https://galaxypublishing.com"
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.AuthorAwardRecord", b =>
                {
                    b.HasOne("BookstoreApplication.Models.Author", "Author")
                        .WithMany("AuthorAwards")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreApplication.Models.Award", "Award")
                        .WithMany("AuthorAwards")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Award");
                });

            modelBuilder.Entity("BookstoreApplication.Models.Book", b =>
                {
                    b.HasOne("BookstoreApplication.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreApplication.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookstoreApplication.Models.Author", b =>
                {
                    b.Navigation("AuthorAwards");
                });

            modelBuilder.Entity("BookstoreApplication.Models.Award", b =>
                {
                    b.Navigation("AuthorAwards");
                });
#pragma warning restore 612, 618
        }
    }
}
